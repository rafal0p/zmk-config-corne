/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
// 0  1  2  3  4  5      6  7  8  9  10 11
// 12 13 14 15 16 17     18 19 20 21 22 23
// 24 25 26 27 28 29     30 31 32 33 34 35
//          36 37 38     39 40 41
  combos {
    compatible = "zmk,combos";

    // home row combos
    combo_lgui {
      key-positions = <15 16>;
      bindings = <&sk LGUI>;
      slow-release;
    };
    combo_lalt {
      key-positions = <14 16>;
      bindings = <&sk LALT>;
      slow-release;
    };
    combo_lctrl {
      key-positions = <13 16>;
      bindings = <&sk LCTRL>;
      slow-release;
    };
    combo_rgui {
      key-positions = <19 20>;
      bindings = <&sk RGUI>;
      slow-release;
    };
    combo_ralt {
      key-positions = <19 21>;
      bindings = <&sk LALT>;
      slow-release;
    };
    combo_rctrl {
      key-positions = <19 22>;
      bindings = <&sk RCTRL>;
      slow-release;
    };

    // fake outer columns
    combo_esc {
      key-positions = <1 2>;
      bindings = <&kp ESC>;
      slow-release;
    };
    combo_tab {
      key-positions = <13 14>;
      bindings = <&kp TAB>;
      slow-release;
    };
    combo_grave {
      key-positions = <25 26>;
      bindings = <&kp GRAVE>;
      slow-release;
    };
    combo_equal {
      key-positions = <9 10>;
      bindings = <&kp EQUAL>;
      slow-release;
    };
    combo_sqt {
      key-positions = <21 22>;
      bindings = <&kp SQT>;
      slow-release;
    };
    combo_bslh {
      key-positions = <33 34>;
      bindings = <&kp BSLH>;
      slow-release;
    };

    // layers
    combo_r_lower {
      key-positions = <19 40>;
      bindings = <&sl 1>;
      slow-release;
    };
    combo_l_raise {
      key-positions = <16 37>;
      bindings = <&sl 2>;
      slow-release;
    };
    combo_r_numpad {
      key-positions = <20 41>;
      bindings = <&sl 3>;
      slow-release;
    };
    combo_l_numpad {
      key-positions = <15 36>;
      bindings = <&sl 3>;
      slow-release;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
&kp ESC   &kp Q &kp W &kp E &kp R     &kp T         &kp Y        &kp U    &kp I     &kp O   &kp P    &kp EQUAL
&kp TAB   &kp A &kp S &kp D &kp F     &kp G         &kp H        &kp J    &kp K     &kp L   &kp SEMI &kp SQT
&kp GRAVE &kp Z &kp X &kp C &kp V     &kp B         &kp N        &kp M    &kp COMMA &kp DOT &kp FSLH &kp BSLH
                      &sl 1 &sk LSHFT &kp SPACE     &mt RSFT RET &sk RALT &mo 2
      >;
    };
    lower_layer {
      bindings = <
&bootloader &kp N1   &kp N2   &kp N3   &kp N4   &kp N5         &kp N6    &kp N7   &kp N8          &kp N9   &kp N0   &kp EQUAL
&kp BSPC    &kp EXCL &kp AT   &kp HASH &kp DLLR &kp PRCNT      &kp CARET &kp AMPS &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp MINUS
&trans      &kp RET  &kp LBKT &kp RBKT &kp LBRC &kp RBRC       &trans    &trans   &trans          &trans   &trans   &trans
                              &trans   &trans   &kp SPACE      &kp RET   &trans   &trans
      >;
    };
    raise_layer {
      bindings = <
&trans &kp LS(LC(LA(Q))) &kp LS(LC(LA(W))) &kp LS(LC(LA(E))) &kp LS(LC(LA(R))) &kp LS(LC(LA(T)))         &trans   &kp BSPC &trans    &trans    &kp DEL   &bootloader
&trans &kp LS(LC(LA(A))) &kp LS(LC(LA(S))) &kp LS(LC(LA(D))) &kp LS(LC(LA(F))) &kp LS(LC(LA(G)))         &kp BSPC &kp LEFT &kp DOWN  &kp UP    &kp RIGHT &kp DEL
&trans &kp LS(LC(LA(Z))) &kp LS(LC(LA(X))) &kp LS(LC(LA(C))) &kp LS(LC(LA(V))) &kp LS(LC(LA(B)))         &trans   &kp HOME &kp PG_DN &kp PG_UP &kp END   &trans
                                           &trans            &trans            &kp UNDER                 &kp RET  &trans   &trans
      >;
    };
    numpad_layer {
      bindings = <
&bt BT_CLR   &bt BT_SEL 3 &kp F7 &kp F8 &kp F9 &kp F10    &kp ASTRK &kp N7 &kp N8 &kp N9 &kp PLUS   &trans
&bt BT_SEL 0 &kp BSPC     &kp F4 &kp F5 &kp F6 &kp F11    &kp SLASH &kp N4 &kp N5 &kp N6 &kp MINUS  &trans
&bt BT_SEL 1 &bt BT_SEL 4 &kp F1 &kp F2 &kp F3 &kp F12    &kp BSPC  &kp N1 &kp N2 &kp N3 &kp KP_DOT &kp COMMA
                                 &trans &trans &trans     &trans    &kp N0 &trans
      >;
    };
  };
};
